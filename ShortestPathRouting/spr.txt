


















 
 
 





Shortest--path routing
Lars Staalhagen 
 Networks Technology and Service Platforms 
 DTU Fotonik Department of Photonics Engineering 
 larst@fotonik.dtu.dk
Version 2.0.1 --- 


Introduction
The purpose of this short lecture note is to introduce the concept of shortest path routing, which is an essential part of modern communication networks. The lecture note is primarily intended to be used in course 34355 Routing in Data Networks, and is loosely based on  and .

Shortest path routing
The aim of shortest--path routing  is to find an optimal path in a network from a source node to a destination node. What constitutes an optimal path is decided by the network operator, i.e., it could be the path with the shortest end-to-end delay, the path with the highest capacity, or some other path.

The algorithms that are used to determine such an optimal path assume a graph--representation of the network, i.e., a graph,  is a tuple, , where  is a set of the nodes in the graph and  is a set of the edges . The nodes in the graph corresponds to routers in the real network, while the edges in the graph correspond to the communication links between routers. Since communication links can be either unidirectional (communication is only possible in one direction) or bidirectional (communication is possible in both directions), this must also be represented in the graph.
Figure  shows a example of a graph with 5 nodes and 7 edges, where  and
.






In addition, a bidirectional link may be asymmetric in some sense, the communication in the two directions may have different characteristics, different delays. Therefore, the graph that is used to represent a network will be a weighted directed graph. Every edge is associated with a metric (a number), which represent some characteristic of the link in the real network. If a physical link is bidirectional, and has the same metric in both directions, it is common to draw the edge as ''direction less'', without an arrowhead, but it must be kept in mind, that this edge actually represents two directional edges. Part a of figure  illustrates a weighted directed graph, while part b shows how the two edges between nodes C and D may be drawn as one.












The metrics that are associated with the edges in the graph can be thought of as the length of that edge. Therefore, a path from one node to another in the graph has a total length of the sum of the length of the edges that are part of the path. In this sense, the metrics are additive, that is, the total length of the path is the sum of the length of the different edges that are part of this path.

The purpose of shortest--path routing is then to find paths in the graph that minimizes the path--lengths. The simplest problem would be to find the shortest--path from a given source--node to a given destination--node, but the common algorithms today determine the shortest--paths from a given source node to all other nodes in the graph. A number of algorithms exist that can be used to determine the shortest paths, but in connection with communication networks, the most common are the Bellman--Ford algorithm and the Dijkstra algorithm. The former is used in a distributed version in connection with the RIP routing protocol, while the latter is used with the OSPF protocol.

As described earlier, the metrics associated with the edges in the
graph correspond with some characteristic of the physical link in the
network. Examples of these metrics include:


Delay -- the metric is (directly) proportional with the delay on the link, so that the shortest--path from the source to the destination is the path that minimizes the end--to--end delay. The link--delay may include any buffering delay at the sending node.

Economical cost -- the metric is (directly) proportional with the expenditure of transmitting information on the link. The shortest--path is then the path that minimizes the expenditure for the network operator.

Error rate -- the metric is a function of the link's error rate , so that a link with a high error--rate is depicted in the graph as an edge with a high cost. Finding the path in the graph that minimizes the sum of the edge metrics would then tend to favour links with lower error rates, since they would have a smaller metric.


In general, the link metrics may also be a function of (some of) the
parameters of a link, i.e.




In mathematical terms, the link--metrics are here denoted by 
for the metric on the link from node  to node . In
general, , i.e. for a bidirectional link, the
metrics are generally different in the two directions, if the
metrics are a function of the link delays. By definition,
, since (informally) the distance from node  to node 
is of course 0. Furthermore, two different nodes,  and , might
not have a direct edge between them, so it is impossible to send a
packet directly from node  to node . This situation is
represented in the metrics as .

The results of the shortest--path calculations are stored in the
source--node's routing table. If the network uses
source--routing, the entire paths are stored since they
must be included in the packets. If the network uses
hop--by--hop routing, the source node will only need to
store the identity of the next--hop node for all destinations.

Bellman--Ford algorithm
The Bellman--Ford algorithm can be described as follows:





















Consider the graph in figure .






If we want to calculate the shortest paths from node A
to all other node in this network, we get the results, shown in
table .


































Since  for all , the algorithm has
converged, and the contents of the routing table for node A will
then be as shown in table .





















At this point, the shortest--paths from the source node to all
other nodes in the network have been found, but in general, we
need the shortest--paths between any pair of nodes in the network.
For this, it is necessary to execute the Bellman--Ford algorithm
 times, using (in turn) every node in the network as the
source node in the algorithm.

Distributed Bellman--Ford
The Bellman--Ford algorithm can also be implemented in
a distributed version. To implement this, a node must from time to
time transmit information from its entire routing table to all its
neighbour 

 nodes. It can be shown that as long as all nodes from time to
time transmit this information, the optimal shortest--paths will be
determined eventually.

The idea behind the distributed Bellman--Ford is that, whenever a
node receives information from a neighbour node, it will determine
whether the information will lead to a better (smaller cost) path
than previously known. As an example, consider
figure : Suppose that node A receives the
following information from node B: ''I can reach node Z with a cost
of '' and from C: ''I can reach node Z with a cost of
''. Node A would then determine, which of these possible
ways of reaching node Z would be better by determining the minimum
of  and . If 
 then the (currently) best path from A to Z is via
node B; otherwise it is via node C.








This description of the distributed version of the Bellman--Ford
algorithm is very simplified. The RIP routing protocol uses the
distributed Bellman--Ford algorithm, but with a number of additional
facilities.

Dijktra's algorithm
Dijkstra's algorithm can be described as shown in
figure .



























If we use Dijkstra's algorithm on the network in
figure , we get table . The
routing table of node A will of course be the same as in the
Bellman--Ford example.































Problems


1
Suppose that all link metrics in a graph has the same value. What
characterizes the paths found by a shortest--path algorithm?


2
Consider a situation where packets transmitted on a link will
either arrive without errors at the other end--point of the link,
or be lost. The probability of a packet loss on the link between
nodes  and  is denoted . Determine the function for
translating a link's packet loss rate into a metric, so that the
shortest paths are the paths that maximizes the probability that
the packets arrive at the destination, determine  in the
relation: .


3
Consider the graph in figure . Determine the
shortest--paths from node A to all other nodes using the
Bellman--Ford algorithm. Repeat the problem with Dijkstra's
algorithm.






4
Explain how the Bellman--Ford algorithm can be modified to find
the shortest--paths to a destination node from all other nodes in
the graph.


1

Bertsekas, D. and Gallager, R.: ''Data
Networks'', 2nd edition, 1992

Cormen, T. H., Leiserson, C. E. and Rivest, R.
L.: ''Introduction to Algorithms'', 1990




